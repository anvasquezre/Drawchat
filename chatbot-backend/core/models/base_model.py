from pydantic import BaseModel, ConfigDict
from datetime import datetime
import uuid

class BaseDTO(BaseModel):
    model_config = ConfigDict(
        from_attributes=True,
        extra='ignore',
        complete=False,
        populate_by_name = True
    )
    
def generate_date_str():
    now = datetime.utcnow()
    return now.strftime('%Y-%m-%d %H:%M:%S.%f')

def generate_id():
    """
    Generate a unique identifier (UUID).

    This function generates a universally unique identifier (UUID) and returns it as a
    string. UUIDs are unique across space and time, making them suitable for various
    purposes, including as unique identifiers for database records, objects, or entities.

    Returns:
        str: A string representation of the generated UUID.

    Example Usage:
        unique_id = generate_id()

    Note:
        - UUIDs generated by this function are typically 36 characters long and have a
          format like "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".
        - The probability of generating the same UUID twice is extremely low, making
          UUIDs suitable for unique identification purposes.
    """
    return str(uuid.uuid4())